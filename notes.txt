Here are recommended containers for each exercise, based on the requirements and restrictions:

### ex00 (Bitcoin Exchange)
- **Recommended container:** `std::map`
- **Reason:** You need to associate dates (as keys) with bitcoin prices (as values) and efficiently find the closest lower date. `std::map` provides sorted keys and fast lookup for this use case.

---

### ex01 (Reverse Polish Notation)
- **Recommended container:** `std::stack`
- **Reason:** RPN evaluation is naturally implemented using a stack, as you push operands and pop them for operations.

---

### ex02 (PmergeMe)
- **Recommended containers:**  
  - `std::vector`  
  - `std::deque`
- **Reason:** You must use two different containers. Both support random access and are suitable for implementing the Ford-Johnson (merge-insert) sort.  
- **Note:** Do **not** use containers from previous exercises.

---

**Summary Table:**

| Exercise | Container(s) to Use     | Container(s) Forbidden     |
|----------|-------------------------|----------------------------|
| ex00     | std::map                | -                          |
| ex01     | std::stack              | std::map                   |
| ex02     | std::vector, std::deque | std::map, std::stack       |

Let me know if you want code examples for any of these!
